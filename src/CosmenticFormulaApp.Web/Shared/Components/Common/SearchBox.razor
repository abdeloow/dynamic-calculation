@implements IDisposable

<div class="search-box">
    <label class="form-label">@Label</label>
    <div class="input-group">
        <span class="input-group-text">
            <span class="oi oi-magnifying-glass"></span>
        </span>
        <input type="text"
               class="form-control"
               placeholder="@Placeholder"
               value="@currentValue"
               @oninput="OnInputChanged" />
        @if (!string.IsNullOrEmpty(currentValue))
        {
            <button class="btn btn-outline-secondary" type="button" @onclick="Clear">
                <span class="oi oi-x"></span>
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback OnValueChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search...";
    [Parameter] public string Label { get; set; } = "Search";
    [Parameter] public int DebounceMs { get; set; } = 300;

    private string currentValue = "";
    private Timer? debounceTimer;

    protected override void OnInitialized()
    {
        currentValue = Value;
    }

    protected override void OnParametersSet()
    {
        if (currentValue != Value)
        {
            currentValue = Value;
            StateHasChanged();
        }
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        currentValue = e.Value?.ToString() ?? "";

        debounceTimer?.Dispose();
        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await ValueChanged.InvokeAsync(currentValue);
                await OnValueChanged.InvokeAsync();
            });
        }, null, DebounceMs, Timeout.Infinite);
    }

    private async Task Clear()
    {
        currentValue = "";
        await ValueChanged.InvokeAsync(currentValue);
        await OnValueChanged.InvokeAsync();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}