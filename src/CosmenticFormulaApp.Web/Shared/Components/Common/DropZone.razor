@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<div class="drop-zone @GetDropZoneClass()"
     @ondragover="HandleDragOver"
     @ondragover:preventDefault="true"
     @ondrop="HandleDrop"
     @ondrop:preventDefault="true"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    <div class="drop-zone-content">
        @if (isDragOver)
        {
            <div class="drag-indicator text-center">
                <span class="oi oi-cloud-upload drag-icon display-4 text-primary"></span>
                <p class="fw-bold mt-2">Drop files here</p>
            </div>
        }
        else
        {
            <div class="upload-prompt text-center">
                <span class="oi oi-cloud-upload upload-icon display-4 text-muted"></span>
                <h4 class="mt-3">Drop JSON files here</h4>
                <p>or <button type="button" class="btn btn-link p-0" @onclick="TriggerFileInput">browse files</button></p>
                <small class="text-muted">Accepts: @AcceptedTypes @(AllowMultiple ? "(multiple files allowed)" : "")</small>
            </div>
        }
    </div>

    <InputFile @ref="fileInput"
               OnChange="HandleFileInput"
               multiple="@AllowMultiple"
               accept="@AcceptedTypes"
               style="display: none;" />
</div>

<style>
    .drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 3rem 2rem;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .drop-zone.drag-over {
            border-color: #0d6efd;
            background-color: #e7f3ff;
            transform: scale(1.02);
        }

        .drop-zone:hover:not(.drag-over) {
            border-color: #adb5bd;
            background-color: #e9ecef;
        }

    .drag-icon, .upload-icon {
        transition: transform 0.3s ease;
    }

    .drop-zone.drag-over .drag-icon {
        transform: scale(1.2);
    }

    .drop-zone-content {
        width: 100%;
    }
</style>

@code {
    [Parameter] public EventCallback<List<IBrowserFile>> OnFilesSelected { get; set; }
    [Parameter] public bool AllowMultiple { get; set; } = false;
    [Parameter] public string AcceptedTypes { get; set; } = ".json";

    private InputFile? fileInput;
    private bool isDragOver = false;

    private string GetDropZoneClass()
    {
        return isDragOver ? "drag-over" : "";
    }

    private void HandleDragOver(DragEventArgs e)
    {
        // Prevent default to allow drop
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        isDragOver = true;
        StateHasChanged();
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        isDragOver = false;
        StateHasChanged();
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        StateHasChanged();

        // In Blazor Server, we still need to trigger the file input
        // as direct drag-drop file access is limited
        await TriggerFileInput();
    }

    private async Task TriggerFileInput()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("triggerFileInput");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error triggering file input: {ex.Message}");
        }
    }

    private async Task HandleFileInput(InputFileChangeEventArgs e)
    {
        var files = new List<IBrowserFile>();

        try
        {
            var maxFiles = AllowMultiple ? 10 : 1;
            var selectedFiles = e.GetMultipleFiles(maxFiles);

            foreach (var file in selectedFiles)
            {
                if (IsValidFileType(file.Name))
                {
                    files.Add(file);
                }
            }

            if (files.Any())
            {
                await OnFilesSelected.InvokeAsync(files);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling file input: {ex.Message}");
        }
    }

    private bool IsValidFileType(string fileName)
    {
        if (AcceptedTypes == "*") return true;

        var extension = Path.GetExtension(fileName);
        return AcceptedTypes.Split(',').Any(type => type.Trim().Equals(extension, StringComparison.OrdinalIgnoreCase));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && fileInput?.Element != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeFileUpload", fileInput.Element);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: Could not initialize file upload: {ex.Message}");
                // Don't throw here - the component should still work without JS initialization
            }
        }
    }
}