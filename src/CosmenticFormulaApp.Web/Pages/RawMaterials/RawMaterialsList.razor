@page "/raw-materials"
@using CosmenticFormulaApp.Application.DTOs.Output
@using CosmenticFormulaApp.Application.Formulas.Queries.GetRawMaterialsList
@using CosmenticFormulaApp.Application.Formulas.Commands.UpdateRawMaterialPrice
@using CosmenticFormulaApp.Web.Shared.Components.Common
@using MediatR
@inject IMediator Mediator
@inject INotificationService NotificationService

<PageTitle>Raw Materials - Cosmetic Formula Manager</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Raw Materials Management</h2>
        <button class="btn btn-outline-secondary" @onclick="RefreshMaterials" disabled="@isLoading">
            <span class="oi oi-reload"></span> Refresh
        </button>
    </div>

    <!-- Materials Table -->
    @if (isLoading)
    {
        <LoadingSpinner Message="Loading raw materials..." />
    }
    else if (rawMaterials?.Any() == true)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Raw Materials & Pricing</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Material Name</th>
                                <th>Current Price</th>
                                <th>Used in Formulas</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var material in rawMaterials)
                            {
                                <tr>
                                    <td>
                                        <strong>@material.Name</strong>
                                    </td>
                                    <td>
                                        <span class="fw-bold">@material.FormattedPrice</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">
                                            @material.UsedInFormulasCount formula@(material.UsedInFormulasCount == 1 ? "" : "s")
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary"
                                                @onclick="() => ShowUpdatePriceModal(material)">
                                            <span class="oi oi-pencil"></span> Update Price
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <EmptyState Message="No raw materials found"
                    Icon="beaker"
                    ActionText="Import Some Formulas"
                    ActionHref="/import" />
    }
</div>

<!-- Update Price Modal -->
@if (showModal && selectedMaterial != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Price - @selectedMaterial.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Current Price</label>
                        <div class="p-2 bg-light rounded">
                            <strong>@selectedMaterial.FormattedPrice</strong>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="newPrice" class="form-label">New Price Amount</label>
                        <div class="input-group">
                            <input type="number"
                                   class="form-control"
                                   id="newPrice"
                                   step="0.01"
                                   min="0.01"
                                   @bind="newPriceAmount" />
                            <span class="input-group-text">@selectedMaterial.PriceCurrency / @selectedMaterial.PriceReferenceUnit</span>
                        </div>
                        @if (priceValidationError)
                        {
                            <div class="text-danger small mt-1">Price must be greater than 0</div>
                        }
                    </div>

                    @if (selectedMaterial.UsedInFormulasCount > 0)
                    {
                        <div class="alert alert-warning">
                            <strong>Impact Warning:</strong> This will affect <strong>@selectedMaterial.UsedInFormulasCount</strong>
                            formula@(selectedMaterial.UsedInFormulasCount == 1 ? "" : "s").
                            All affected formulas will have their costs recalculated.
                        </div>
                    }

                    @if (priceChangePercentage.HasValue)
                    {
                        <div class="alert @(priceChangePercentage > 0 ? "alert-danger" : "alert-success")">
                            Price change: <strong>@(priceChangePercentage > 0 ? "+" : "")@priceChangePercentage.Value.ToString("F1")%</strong>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn btn-primary"
                            @onclick="UpdatePrice"
                            disabled="@(isUpdatingPrice || priceValidationError || newPriceAmount <= 0)">
                        @if (isUpdatingPrice)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Update Price
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Notifications -->
<ToastNotification />

@code {
    private List<RawMaterialListItemDto> rawMaterials = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isUpdatingPrice = false;
    private RawMaterialListItemDto? selectedMaterial;
    private decimal newPriceAmount = 0;
    private bool priceValidationError => newPriceAmount <= 0;
    private decimal? priceChangePercentage;

    protected override async Task OnInitializedAsync()
    {
        await LoadRawMaterials();
    }

    private async Task LoadRawMaterials()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var query = new GetRawMaterialsListQuery();
            var result = await Mediator.Send(query);

            if (result.IsSuccess)
            {
                rawMaterials = result.Data ?? new();
            }
            else
            {
                NotificationService.ShowError("Failed to load raw materials");
                rawMaterials = new();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error loading raw materials: {ex.Message}");
            rawMaterials = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowUpdatePriceModal(RawMaterialListItemDto material)
    {
        selectedMaterial = material;
        newPriceAmount = material.PriceAmount;
        priceChangePercentage = null;
        showModal = true;
        StateHasChanged();
    }

    private void HideModal()
    {
        showModal = false;
        selectedMaterial = null;
        newPriceAmount = 0;
        priceChangePercentage = null;
        StateHasChanged();
    }

    private async Task UpdatePrice()
    {
        if (selectedMaterial == null || priceValidationError) return;

        isUpdatingPrice = true;
        StateHasChanged();

        try
        {
            var command = new UpdateRawMaterialPriceCommand
            {
                RawMaterialId = selectedMaterial.Id,
                NewPriceAmount = newPriceAmount,
                Currency = selectedMaterial.PriceCurrency,
                ReferenceUnit = selectedMaterial.PriceReferenceUnit
            };

            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                var affectedCount = result.Data?.Count ?? 0;
                NotificationService.ShowSuccess($"Price updated successfully. {affectedCount} formula(s) affected.");

                await LoadRawMaterials();
                HideModal();
            }
            else
            {
                NotificationService.ShowError($"Failed to update price: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error updating price: {ex.Message}");
        }
        finally
        {
            isUpdatingPrice = false;
            StateHasChanged();
        }
    }

    private async Task RefreshMaterials()
    {
        await LoadRawMaterials();
        NotificationService.ShowInfo("Raw materials refreshed");
    }

    // Calculate price change percentage when new price is entered
    protected override void OnParametersSet()
    {
        if (selectedMaterial != null && newPriceAmount > 0 && newPriceAmount != selectedMaterial.PriceAmount)
        {
            priceChangePercentage = ((newPriceAmount - selectedMaterial.PriceAmount) / selectedMaterial.PriceAmount) * 100;
        }
        else
        {
            priceChangePercentage = null;
        }
    }
}